// Файл "tsconfig.json":
// - устанавливает корневой каталог проекта TypeScript;
// - выполняет настройку параметров компиляции;
// - устанавливает файлы проекта.
// Присутствие файла "tsconfig.json" в папке указывает TypeScript, что это корневая папка проекта.
// Внутри "tsconfig.json" указываются настройки компилятора TypeScript и корневые файлы проекта.
// Программа компилятора "tsc" ищет файл "tsconfig.json" сначала в папке, где она расположена, затем поднимается выше и ищет в родительских папках согласно их вложенности друг в друга.
// Команда "tsc --project C:\path\to\my\project\folder" берет файл "tsconfig.json" из папки, расположенной по данному пути.
// Файл "tsconfig.json" может быть полностью пустым, тогда компилятор скомпилирует все файлы с настройками заданными по умолчанию.
// Опции компилятора, перечисленные в командной строке перезаписывают собой опции, заданные в файле "tsconfig.json".
{
  // Настраивает параметры компиляции. Параметры называются также, как и в командной строке.
  "compilerOptions": {
    // Тип кода создаваемого итогового файла.
    "target": "ES2020",
    // Данный флаг активирует новое поведение генерации конечного кода.
    "useDefineForClassFields": true,
    // Набор библиотечных файлов полифилов, которые будут включены в итоговый выходной файл.
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    // Определяет тип импорта кода в итоговом файле, прописанном в "outFile". Необходимо задавать при использовании опции "outFile".
    "module": "ESNext",
    // Не проверять типы, заданные во всех файлах описания типов (*.d.ts).
    "skipLibCheck": true,

    /* Bundler mode */
    // Определить способ поиска модулей в папках: как в Node.js или классический, как в TypeScript 1.5 и ниже.
    "moduleResolution": "bundler",
    // Позволяет файлам TypeScript импортировать друг друга с расширением, специфичным для TypeScript , например .ts , .mts или .tsx .
    "allowImportingTsExtensions": true,
    // Позволяет импортировать модули с расширением «.json», что является обычной практикой в ​​проектах узлов. Сюда входит создание типа для import на основе формы JSON static .
    "resolveJsonModule": true,
    // Обрабатывать каждый файл, как отдельный изолированный модуль.
    "isolatedModules": true,
    // Не создавать итоговый файл.
    "noEmit": true,
    // Включать ли поддержку ".tsx" файлов?
    "jsx": "react-jsx",

    /* Linting */
    // Включить ли все строги проверки типов сразу: noImplicitAny, noImplicitThis, alwaysStrict, strictNullChecks, strictFunctionTypes, strictPropertyInitialization?
    "strict": true,
    // Показывать ошибку, если где-то найдены неиспользуемые локальные значения.
    "noUnusedLocals": true,
    // Показывать ошибку, если где-то найдены неиспользуемые параметры.
    "noUnusedParameters": true,
    // Сообщить об ошибке в случае обнаружения проваливания в конструкции switch-case?
    "noFallthroughCasesInSwitch": true
  },
  // Если путь до папки заканчивается так "*" или так ".*", тогда в ней будут скомплированы все файлы с расширениями .ts, .tsx, .d.ts, а также .js и .jsx, если опция "allowJs" будет равна true.
  "include": [
    // Секция "include" позволяет скомпилировать все файлы, находящиеся в заданных папках.
    // Если секция "files" и секция "include" заданы вместе, то будут скомпилированы только файлы, перечисленные в обеих секциях.
    // Все файлы, на которые есть ссылки во включенных файлах из секции "files" и секции "include", также скомпилируются.
    "src",
    "src/@types/*.d.ts"
  ],
  // Проект, который использует другие проекты в качестве своих зависимостей, должен указать ссылки на них в своем конфигурационном файле.
  "references": [{ "path": "./tsconfig.node.json" }]
}
